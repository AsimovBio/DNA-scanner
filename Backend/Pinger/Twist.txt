No code yet - only an overview

1. API-Endpoints
    get /v1/accounts/
        Get List of accessible accounts

    get /v1/accounts/{account}/contacts/
        Get account's user list

    get /v1/accounts/{account}/users/
        Get account's user list

    get /v1/accounts/{id}/
        Get specific account

    get /v1/accounts/{id}/prices/
        Get Pricebook

    get /v1/catalog-items/
        Get Pricebook

    get /v1/order-sub-types/{sub_type}/tat/

    get /v1/prices/
        Get Pricebook

    get /v1/quotes/{quote_id}/tat/

    get /v1/users/{email}/
        Get Contact info, account info and vector data info by email.

    patch /v1/users/{email}/
        This allows users to partially update their contact info:

    get /v1/users/{email}/addresses/
        Get list of all addresses for user

    post /v1/users/{email}/addresses/
        Create a new address for user

    post /v1/users/{email}/addresses/verify/
        Address Verification Endpoint

    delete /v1/users/{email}/addresses/{id}/
        Delete address from user

    get /v1/users/{email}/addresses/{id}/
        Get the information for the address using the id.

    post /v1/users/{email}/addresses/{id}/share/
        Share the Address object with another user

    get /v1/users/{email}/bfx-options/
        Returns list of available choices for organism and avoid_introducing

    get /v1/users/{email}/codon-optimizations/
        Codon fitting get by id

    post /v1/users/{email}/codon-optimizations/
        Codon Fitting Optimisation Job Create

    get /v1/users/{email}/codon-optimizations/choices/
        Returns list of available choices for organism and avoid_introducing

    post /v1/users/{email}/constructs/
        #Construct Creation

    get /v1/users/{email}/constructs/describe/
        #Construct describe

    post /v1/users/{email}/constructs/full-construct/
        This endpoint receives a list of sequences, and returns the same list but within the full construct (based on the insertion_site_id if used).

    post /v1/users/{email}/constructs/synthesized-construct/
        This endpoint receives a list of sequences, and returns the same list but within the synthesized sequences (based on the insertion_site_id if used).

    patch /v1/users/{email}/constructs/{id}/
        This method allows to update the details of a scored construct

    get /v1/users/{email}/csvs/{id}/
        Retrieve the CSV that was attached to the finalized order.

    get /v1/users/{email}/download-csv/{id}/

    get /v1/users/{email}/orders/
        Get the list of orders and their shipments for the user. orders will have a status of either:

    post /v1/users/{email}/orders/
        Create a new order from an existing quote.

    delete /v1/users/{email}/orders/{id}/
        Delete for orders that have not yet started production, we perform a soft delete

    patch /v1/users/{email}/orders/{id}/
        this method allows to update the payment method id of an order that has no payment method id defined

    post /v1/users/{email}/orders/{id}/item-sequences/

    get /v1/users/{email}/orders/{id}/items/
        Get the items and their details for an order of a user

    get /v1/users/{email}/orders/{id}/plate-maps/{barcode}/

    get /v1/users/{email}/orders/{id}/shipments/{shipment_id}/plate-maps/

    get /v1/users/{email}/payments/
        Return the list of payments available for this user.

    post /v1/users/{email}/payments/
        Payment Creation API

    delete /v1/users/{email}/payments/{id}/
        Delete a user's specific payment by id.

    get /v1/users/{email}/payments/{id}/
        Get a user's specific payment by id.

    patch /v1/users/{email}/payments/{id}/
        Update is only supported for Credit Card payment methods

    put /v1/users/{email}/payments/{id}/

    get /v1/users/{email}/payments/{id}/download-po-file/
        Generate a signed URL in S3 that will

    post /v1/users/{email}/payments/{id}/share/
        Share the Payment object with another user

    post /v1/users/{email}/quotes/
        Create quote for the specified user.

    delete /v1/users/{email}/quotes/{id}/

    get /v1/users/{email}/quotes/{id}/
        Get a user's quote details by id.

    get /v1/users/{email}/quotes/{id}/pdf/
        Generate a signed URL in S3 that will

    get /v1/users/{email}/quotes/{sf_id}/regenerate-pdf/
        Regenerate PDF file and upload it to S3

    get /v1/users/{email}/quotes/{sf_id}/regenerate-pdf\.html/
        Regenerate PDF file and upload it to S3

    get /v1/users/{email}/vectors/
        Get all vectors (list) of a specific Contact ID

    post /v1/users/{email}/vectors/custom
        Create new custom vector.

    get /v1/users/{email}/vectors/{id}/
        Get Vector information by the mes vector id


2. Needed Functionalites
api-token-verify 
https://twist-api.twistbioscience-staging.com/api-token-verify/
    request1 = {"token": {TOKEN}}
    resp = requests.post("https://twist-api.twistbioscience-staging.com/api-token-verify/", json = request)
    print(resp.json())


/v1/accounts/
https://twist-api.twistbioscience-staging.com/v1/accounts/
    resp = requests.get('https://twist-api.twistbioscience-staging.com/v1/accounts/', headers={"Authorization": "JWT %s" % 'TOKEN', 'X-End-User-Token': 'END_USER_TOKEN'})
    print(resp.json())


/v1/accounts/{id}/
https://twist-api.twistbioscience-staging.com/v1/accounts/{id}/
resp = requests.get('https://twist-api.twistbioscience-staging.com/v1/accounts/{id}/', headers={"Authorization": "JWT %s" % 'TOKEN', 'X-End-User-Token': 'END_USER_TOKEN'})
    print(resp.json())

/v1/accounts/{id}/prices/
https://twist-api.twistbioscience-staging.com/v1/accounts/{id}/prices/
resp = requests.get('https://twist-api.twistbioscience-staging.com/v1/accounts/{id}/prices/', headers={"Authorization": "JWT %s" % 'TOKEN', 'X-End-User-Token': 'END_USER_TOKEN'})
    print(resp.json())

/v1/prices/
https://twist-api.twistbioscience-staging.com/v1/prices/?product_code=IF_SPECIFIED&product_family=IF_SPECIFIED&filter=IF_SPECIFIED
Get Pricebook If account_id is specified, find linked "Contracted Price" objects and apply special pricing according to the CP terms (e.g. product_family=Genes discounted 10%)
product_code 			query 	string (OPTIONAL)
product_family 			query 	string (OPTIONAL)
filter 			        query 	string (OPTIONAL)
resp = requests.get('https://twist-api.twistbioscience-staging.com/v1/prices/?product_code=IF_SPECIFIED&product_family=IF_SPECIFIED&filter=IF_SPECIFIED', headers={"Authorization": "JWT %s" % 'TOKEN', 'X-End-User-Token': 'END_USER_TOKEN'})
    print(resp.json())


/v1/users/{email}/
https://twist-api.twistbioscience-staging.com/v1/users/{email}/
resp = requests.get('https://twist-api.twistbioscience-staging.com/v1/users/{email}/', headers={"Authorization": "JWT %s" % 'TOKEN', 'X-End-User-Token': 'END_USER_TOKEN'})
    print(resp.json())
